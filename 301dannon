#!/usr/bin/env python3

import sys

                                                        # Bubble sort function

#On parcourt tout le tableau pour trouver  le plus petit élements du tableau, et le placer à la première position, on recommence l'opération en cherchant le 2ème plus petit élement
#en commencant à la deuxième position du tableau. Le plus petit élément trouvé est placé à la deuxième position. Après chaque nouvel élement positionné on réitère notre recherche
#en commencait par la position suivante du tableau et ce, jusqu'à la fin du tableau


def bubble_sort(tableau_tri):
    taille = len(tableau_tri)
    compteur = 0
    pas_trie = False
    for i in range(0, taille - 1):
        for j in range(0, taille - i - 1):
            if tableau_tri[i] > tableau_tri[i+1]:
                pas_trie = False
                tableau_tri[i], tableau_tri[i + 1] = tableau_tri[i + 1], tableau_tri[i]
            compteur += 1
    return compteur


                                                        # Select sort Function

#On parcourt tout le tableau pour trouver  le plus petit élements du tableau, et le placer à la première position, on recommence l'opération en cherchant le 2ème plus petit élement
#en commencant à la deuxième position du tableau. Le plus petit élément trouvé est placé à la deuxième position. Après chaque nouvel élement positionné on réitère notre recherche
#en commencait par la position suivante du tableau et ce, jusqu'à la fin du tableau

def select_sort(tableau_tri):
    compteur = 0
    taille = len(tableau_tri)
    for j in range(0, taille - 1):
        imin = j
        for i in range(j + 1, taille):
            if tableau_tri[i] < tableau_tri[imin]:
                imin = i
            compteur += 1
        if imin != j:
            tableau_tri[j], tableau_tri[imin] = tableau_tri[imin], tableau_tri[j]
    return compteur

                                                            #Insertion sort function
 #    on considère que le premier élement ne bouge pas, et que l'élement numéro 1 devient 
 #    la valeur que l'on va comparer avec la valeure précedente
 #   si la valeur precedente est inférieur à la valeure actuelle, on swap les 2 valeurs.

def insertion_sort(tableau_tri):
    compteur = 0
    taille = len(tableau_tri)
    for i in range(1, taille):
        j = i
        while j > 0:
            compteur += 1
            if tableau_tri[j - 1] <= tableau_tri[j]:
                tableau_tri[j], tableau_tri[j - 1] = tableau_tri[j - 1], tableau_tri[j]
                j -= 1
            else:
                break
    return compteur

                                                                    #FOnction de tri fusion
 #On divise le tableau en 2 on a un tableau tableau_finalult qui sera le tableau_finalultat de la fusion
 #du tableau de gauche et de droite , ensuite on divise les tableaux en sous tableaux 
 #Jusqu'à obtenir  que des tableaux de un seul élement.
def merge(gauche, droite):
    tableau_final = []
    compteur = 0
    while gauche and droite:
        compteur += 1
        if gauche[0] <= droite[0]:
            tableau_final.append(gauche[0])
            gauche = gauche[1:]
        else:
            tableau_final.append(droite[0])
            droite = droite[1:]
    tableau_final += gauche
    tableau_final += droite
    return tableau_final, compteur


def merge_sort(tableau_tri):
    taille = len(tableau_tri)
    compteur = 0
    gauche = []
    droite = []
    if taille <= 1:
        return tableau_tri, compteur
    for i in range(0, taille):
        if i < taille // 2:
            gauche.append(tableau_tri[i])
        else:
            droite.append(tableau_tri[i])
    gauche, tmp = merge_sort(gauche)
    compteur += tmp
    droite, tmp = merge_sort(droite)
    compteur += tmp
    ret, tmp = merge(gauche, droite)
    compteur += tmp
    return ret, compteur


def tri_rapide(tableau_tri):
    taille = len(tableau_tri)
    compteur = 0
    pivot = tableau_tri[0]
    gauche, droite, equal = [], [], [pivot]
    if taille <= 1:
        return tableau_tri, compteur
    for i in range(1, taille):
        compteur += 1
        if tableau_tri[i] >= pivot:
            gauche.append(tableau_tri[i])
        else:
            droite.append(tableau_tri[i])
    rl = tri_rapide(gauche)
    rr = tri_rapide(droite)
    tableau_tri = rl[0] + equal + rr[0]
    compteur += rl[1] + rr[1]
    return tableau_tri, compteur


def main(args):
    if len(args) != 1:
        sys.exit(84)
    if args[0] == "-help":
        print("USAGE\n\t./301dannon file\n\n\nDESCRIPTION\n\tfile\t le fichiers doit contenir que des chiffres et des nombres.")
        return
    tableau_tri = []
    f = open(args[0], "r")
    text = f.read().strip().replace("\t", " ").replace('\n', " ")
    text = ' '.join(text.split(" "))                                    #On remplace tout les caractères autre que des nombres et des espaces par des espaces.
    spl = text.split(" ")
    si_unNombre = True
    try:
        a = list(map(float, spl))
    except ValueError:
        si_unNombre = False
    for elem in spl:
        if len(elem) > 0:
                tableau_tri.append(float(elem) if si_unNombre else elem)                              #gestion d'erreur & parsing du fichier
    f.close()
    if len(tableau_tri) <= 1:
        print("{} element".format(len(tableau_tri)))
    else:
        print("{} elements".format(len(tableau_tri)))
    c = select_sort(tableau_tri[::])
    print("select sort: {} comparison".format(c) + ("s" if c > 1 else ""))
    c = insertion_sort(tableau_tri[::])
    print("insertion sort: {} comparison".format(c) + ("s" if c > 1 else ""))
    c= bubble_sort(tableau_tri[::])
    print("bubble sort: {} comparison".format(c) + ("s" if c > 1 else ""))
    c= merge_sort(tableau_tri[::])[1]                                                         #on affiche le resultat de chaque algo de tri
    print("fusion sort: {} comparison".format(c) + ("s" if c > 1 else ""))
    c= tri_rapide(tableau_tri[::])[1]
    print("quicksort: {} comparison".format(c) + ("s" if c > 1 else ""))


if __name__ == "__main__":
    try:
        main(sys.argv[1:])
    except:
        sys.exit(84)